plugins {
    alias(libs.plugins.kotlin) apply false
    alias(libs.plugins.architectury)
    alias(libs.plugins.architectury.loom) apply false
    alias(libs.plugins.dotenv)
}

architectury {
    minecraft = libs.versions.minecraft.get()
}

subprojects {
    apply plugin: libs.plugins.kotlin.get().pluginId
    apply plugin: libs.plugins.architectury.loom.get().pluginId

     loom {
         silentMojangMappingsLicense()
     }

    dependencies {
        minecraft libs.minecraft

        mappings loom.officialMojangMappings()
        // Or feel free to use any other mappings you prefer

        annotationProcessor libs.bundles.asm
    }

    sourceSets.main.kotlin.srcDirs += 'src/main/java'
    sourceSets.main.resources.srcDirs += "src/generated/resources"
}

allprojects {
    apply plugin: "java"
    apply plugin: "maven-publish"
    apply plugin: libs.plugins.architectury.asProvider().get().pluginId

    // disable most javadoc warnings
    javadoc.options.addStringOption('Xdoclint:none', '-quiet')

    version = project.modVersion
    group = project.mavenGroup

    repositories {
        maven { url 'https://jitpack.io' }
        maven {
            url "https://squiddev.cc/maven/"
        }
        maven { url "https://maven.terraformersmc.com/" }
        maven { url "https://maven.terraformersmc.com/releases" }
        maven { url "https://maven.shedaniel.me/" }

        // Hex Casting Dependencies
        maven { url "https://maven.blamejared.com/" }
        maven {
            name "entity reach"
            url "https://maven.jamieswhiteshirt.com/libs-release/"
        }
        maven { url "https://mvn.devos.one/snapshots/" }
        maven {
            name = 'Ladysnake Mods'
            url = 'https://maven.ladysnake.org/releases'
        }
        maven {
            name = 'Kotlin for Forge'
            url = 'https://thedarkcolour.github.io/KotlinForForge/'
        }
        maven {
            url = "https://maven.theillusivec4.top/"
        }
        maven {
            name = 'GeckoLib'
            url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
        }
        exclusiveContent {
            forRepository {
                maven {
                    name = "Modrinth"
                    url = "https://api.modrinth.com/maven"
                }
            }
            filter {
                includeGroup "maven.modrinth"
            }
        }

        // Add any other repositories with your cross-platform dependency mods
    }

    java {
        java.toolchain.languageVersion = JavaLanguageVersion.of(libs.versions.java.get())
        java.withSourcesJar()
        java.withJavadocJar()
    }

    sourcesJar {
        duplicatesStrategy 'exclude'
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
        it.options.release = libs.versions.java.get().toInteger()
    }

    // Disables Gradle's custom module metadata from being published to maven. The
    // metadata includes mapped dependencies which are not reasonably consumable by
    // other mod developers.
    tasks.withType(GenerateModuleMetadata).configureEach {
        enabled = false
    }

    processResources {
        exclude '.cache'

        // get all required versions from libs.versions.toml
        def versionCatalog = rootProject.extensions.getByType(VersionCatalogsExtension).named("libs")
        def dependencyVersions = [
            "version": project.modVersion,
            "versions": versionCatalog.getVersionAliases().collectEntries {
                // both "." and "-" cause issues with expand :/
                [it.replace(".", "_"), versionCatalog.findVersion(it).get().requiredVersion]
            }
        ]

        // for incremental builds
        inputs.properties dependencyVersions

        // expand the above variables in these files
        filesMatching(["fabric.mod.json", "META-INF/mods.toml"]) {
            expand dependencyVersions
        }
    }

    processTestResources {
        exclude '.cache'
    }
}

ext.getArtifactId = { platform -> return "$modID-$platform-${libs.versions.minecraft.get()}" }

ext.getLatestChangelog = {
    Collection<String> lines = file("$rootDir/CHANGELOG.md").readLines()
    String changelog = ""
    Boolean atSegment = false
    for (String line : lines) {
        if (line.startsWith("## ")) {
            if (atSegment) break // hit next segment
            atSegment = true
        }
        if (atSegment) changelog += "$line\n"
    }
    return changelog.trim()
}

tasks.register("viewLatestChangelog") {
    group "documentation"
    description "Print the topmost single version section from the full CHANGELOG.md file."
    doLast {
        println(getLatestChangelog())
    }
}
