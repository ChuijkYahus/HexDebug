plugins {
    alias(libs.plugins.shadow)
    alias(libs.plugins.modPublish)
}

archivesBaseName = getArtifactId("Fabric")

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":Common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    flatDir {
        dir 'libs'
    }
}

dependencies {
    modCompileOnly libs.findbugs.jsr305

    // Loaders and base APIs
    modImplementation libs.fabric.loader
    modApi libs.fabric.api
    modImplementation libs.kotlin.fabric
    modApi(libs.architectury.fabric) {
        // Fix for the "two fabric loaders" loading crash
        exclude group: "net.fabricmc", module: "fabric-loader"
    }

    // Hex Casting stuff
    modImplementation(libs.hexcasting.fabric) {
        // If not excluded here, calls a nonexistent method and crashes the dev client
        exclude module: "phosphor"
    }

    modImplementation libs.paucal.fabric
    modImplementation libs.patchouli.fabric

    modImplementation libs.cardinalComponents

    modImplementation libs.serializationHooks
    include libs.serializationHooks

    implementation(libs.mixinExtras)
    include(libs.mixinExtras)

    modImplementation libs.trinkets

    modApi(libs.clothConfig.fabric) {
        exclude(group: "net.fabricmc.fabric-api")
    }

    common(project(path: ":Common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":Common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    from(rootProject.file("Common/src/main/resources")) {
        include("data/*/patchouli_books/")
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set null
}

jar {
    archiveClassifier.set "dev"
}

sourcesJar {
    def commonSources = project(":Common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = project.archivesBaseName + "-" + project.name + "-fabric"
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

publishMods {
    file = remapJar.archiveFile
    additionalFiles.from(sourcesJar.archiveFile)
    changelog = getLatestChangelog()
    type = STABLE
    modLoaders.add("fabric")
    modLoaders.add("quilt")

    version = project.version + "-fabric"
    displayName = "HexDebug $project.version [Fabric]"

    // Uncomment your desired platform(s)
//    curseforge {
//        accessToken = project.curseforgeApiToken
//        projectId = project.curseforgeID
//        minecraftVersions.add(minecraftVersion)
//
//        requires{
//            slug = "fabric-api"
//        }
//        requires {
//            slug = "architectury-api"
//        }
//        requires {
//            slug = "fabric-language-kotlin"
//        }
//        requires {
//            slug = "hexcasting"
//        }
//    }
//
//    modrinth {
//        accessToken = project.modrinthApiToken
//        projectId = project.modrinthID
//        minecraftVersions.add("1.19.2")
//
//        requires{
//            slug = "fabric-api"
//        }
//        requires {
//            slug = "architectury-api"
//        }
//        requires {
//            slug = "fabric-language-kotlin"
//        }
//        requires {
//            slug = "hex-casting"
//        }
//    }
}
